BiocManager::install()
BiocManager::install("Onassis")
library(lcars)
library(trekcolors)
library(ggplot2)
library(grid)
logo <- rasterGrob(readPNG(system.file("stlogo-white.png", package = "lcars")))
clrs <- c("#FF3030", "#FFFF33", "#20B2AA")
g <- ggplot(iris, aes(Sepal.Length, Sepal.Width, color = Species)) +
geom_point() +
theme_lcars_dark() +
coord_cartesian(clip = "off") +
annotation_custom(logo, xmin = 9.4, xmax = Inf, ymin = 3.6, ymax = Inf) +
scale_color_manual(values = clrs)
library(lcars)
library(trekcolors)
library(ggplot2)
library(grid)
library(png)
logo <- rasterGrob(readPNG(system.file("stlogo-white.png", package = "lcars")))
clrs <- c("#FF3030", "#FFFF33", "#20B2AA")
g <- ggplot(iris, aes(Sepal.Length, Sepal.Width, color = Species)) +
geom_point() +
theme_lcars_dark() +
coord_cartesian(clip = "off") +
annotation_custom(logo, xmin = 9.4, xmax = Inf, ymin = 3.6, ymax = Inf) +
scale_color_manual(values = clrs)
g
len_frac <- c(0.55, 0.25, 0.2, 0.4, 0.1, 0.2, 0.1, 0.1)
n_seg <- c(1, 2, 0, 8)
corner_colors <- c("chestnut-rose", "lilac", rep("pale-canary", 2))
side_colors <- list("pale-canary", c("anakiwa", "lilac"), NA,
c("#000000", rep("anakiwa", 2), rep("orange-peel", 5)))
side_labels <- list(
"R 47.0.2", c("47", "B4"), NA,
c("LCARS", "47174-A", "...", "O'Brien", "Lefler", "La Forge", "Barclay", "Argyle"))
lcars_border(g, corners = 1:3, length_frac = len_frac, side_n_segments = n_seg,
corner_color = corner_colors, side_color = side_colors,
side_label = side_labels, label_size = 0.7)
text(2.8, 0.1, "Iris dataset (classic Terran flora sample)",
col = lcars_colors("anakiwa"), font = 2, cex = 0.7)
text(7.55, 0.1, "LCARS BETA R Interface v0.0.1",
col = lcars_colors("pale-canary"), font = 2, cex = 0.7)
lcarsApp("demo")
virtualenv_list()
```
reticulate::py_config()
```
reticulate::py_config()
reticulate::virtualenv_list()
system("pip --version")
library(reticulate)
ls(2)
sqlparse
?py_install
library(devtools)
library(roxygen2)
devtools::load_all()
devtools::load_all()
devtools::load_all()
?read.dcf
devtools::load_all()
?bindingIsLocked
devtools::load_all()
py_versions_windows()
install_pycompass()
reticulate::py_config()
# create a new environment
```
virtualenv_create("pycompassr")
```
virtualenv_install("pycompassr", "pycompass")
pycompass <- import("pycompass")
pycompass$biological_feature
pycompass$compendium
pycompass$compendium$Compendium
pycompass$compendium$Compendium$get_platform_types
pycompass$compendium$Compendium$get_platform_types[1]
pycompass$compendium$get_factory
pycompass$compendium$get_factory(1)
pycompass$connect()
pycompass$connect$Connect()
pycompass$compendium
pycompass$compendium
pycompass$Compendium$rank_biological_features
pycompass$BiologicalFeature
pycompass$BiologicalFeature$get
pycompass$BiologicalFeature$get()
pycompass$BiologicalFeature$get(1)
pycompass$compendium(0)
pycompass$Compendium$get_data_sources(fields=['sourceName'])
pycompass$Compendium$get_data_sources(fields='sourceName')
pycompass$Compendium$get_data_sources('sourceName')
pycompass$Compendium$get_data_sources("sourceName")
knitr::opts_chunk$set(echo = TRUE)
pycompass$Sample$using()
pycompass$Sample$using(pycompass$compendium)
py$ds
py$compendia
py$compendia[0]
py$compendia[1]
py$compendia[2]
py$s
py$plts
py$plts[0]
py$plts[1]
py$st
pycompass$Sample$using(pycompass$compendium)
reticulate::virtualenv_list()
devtools::load_all()
py$ds
#py$s
devtools::load_all()
ls(2)
test()
devtools::load_all()
test()
ds
py_to_r(test())
devtools::load_all()
test2
test2()
library(scaffolder)
ls(2)
?custom_scaffold_py_function_wrapper
py$ds
reticulate::py_function_wrapper(py$ds)
reticulate::py_function_wrapper(python_function=py$ds)
reticulate::py_function_wrapper(python_function=py$ds())
reticulate::py_function_wrapper(python_function=py$
reticulate::py_function_wrapper(python_function=py)
test
test()
devtools::load_all()
test_function()
pypass = reticulate::import("pypass")
pycompass = reticulate::import("pycompass")
pycompass$connect(url)
url = 'http://compass.fmach.it/graphql'
url
pycompass$connect
pycompass$connect$Connect(url = url)
conn = pycompass$connect$Connect(url = url)
conn
pycompass$compendium$run_query(url = url)
pycompass$compendium()
conn$get_compendia
conn$get_compendia()
compendia = conn$get_compendia()
ds = compendia[0]
ds
ds = compendia[1]
ds
compendia()
compendia
r_to_py(compendia)
r_to_py(compendia[0])
r_to_py(compendia[1])
r_to_py(compendia[1])
r_to_py(compendia[1].get_data_sources)
r_to_py(compendia[1].get_data_sources())
conn$get_compendium
conn$get_compendium()
conn$url
conn$get_compendia()
conn$get_compendia[[1]]
conn$get_compendia[1]
conn$get_compendia
conn$get_compendia[0]
str(conn$get_compendia)
str(conn)
py_to_r(conn)
py_to_r(conn)[1]
str(py_to_r(conn))
s = pycompass$Sample$get(filter = {'first': 10})
s = pycompass$Sample$get()
s = pycompass$Sample$get(1:10)
s = pycompass$Sample$using()
s = pycompass$Sample$using(compendium = compendia)
s
s = pycompass$Sample$using(compendium = compendia)
s$get()
s$get
s$get(filter = 1:10)
s$get(filter = 'first')
s$using(conn)
s$using(conn)
s$using(conn)[1]
s$using(conn)[0]
ss=s$using(conn)
ss
ss$get()
ss$get(filter = 10)
ss$get(filter = 'first')
?import
pycompass2 = reticulate::import("pycompass", convert=FALSE)
pycompass2$Sample
pycompass2$Sample()
pycompass2$Sample$using(conn)
py_to_r(pycompass2$Sample$using(conn))
devtools::load_all()
test_function()
py$ds
as.data.frame(py$ds)
as.data.frame(t(py$ds))
t(py$ds)
py$ds[1]
py$ds[[1]]
py$ds[[2]]
sapply(py$ds, unlist)
dapply(py$ds, unlist)
sapply(py$ds, unlist)
t(sapply(py$ds, unlist))
devtools::load_all()
test_function()
py$bf
py$bf[1]
py$bf[[1][]
py$bf[[1]]
BiocManager::install("BANDITS")
repl_python()
module_1
repl_python()
repl_python()
library(devtools)
library(roxygen2)
library(scaffolder)
devtools::load_all()
get_platform_types()
my_conn <- get_connection()
my_conn$description
my_conn$get_data_sources()
load_all()
gget_data_sources()
get_data_sources()
load_all()
get_data_sources()
my_conn$normalization
my_conn$rank_sample_sets
my_conn$rank_sample_sets()
get_platform_types(my_conn)
my_conn$compendium_name
my_conn$connection$url
my_conn$connection$get_compendium('vitis vinifera')
tmp=my_conn$connection$get_compendium('vitis vinifera')
tmp
tmp=my_conn$connection$get_compendium('vitis_vinifera')
tmp$compendium_full_name
load_all()
my_conn$connection$get_compendia()
my_conn$connection$get_compendia()[[1]]
junk=my_conn$connection$get_compendia()[[1]]
rm(junk)
pycompass
pycompass <- reticulate::import("pycompass")
pycompass$BiologicalFeature
bf <-  pycompass$BiologicalFeature$using(vv_compendium)
vv_compendium <- conn$connection$get_compendium('vitis_vinifera')
vv_compendium <- my_conn$connection$get_compendium('vitis_vinifera')
vv_compendium$compendium_name
# genes = BiologicalFeature.using(vv_compendium).get(filter={'name_In': gene_names})
bf <-  pycompass$BiologicalFeature$using(vv_compendium)
bf
bf$compendium
bf$compendium$compendium_full_name
bf$get(filter = gene_names,  fields = 'name_In')
gene_names <-c('VIT_05s0094g00350','VIT_07s0031g02630','VIT_19s0015g02480','VIT_08s0007g08840','VIT_01s0026g00520','VIT_03s0017g02170','VIT_19s0014g05330','VIT_02s0154g00130','VIT_02s0025g04330','VIT_13s0067g00490','VIT_09s0002g01200','VIT_14s0030g00140','VIT_03s0063g00120','VIT_05s0029g01480','VIT_11s0052g01650','VIT_02s0087g01020','VIT_09s0070g00160','VIT_13s0019g02180','VIT_07s0095g00550','VIT_04s0008g06570','VIT_04s0069g00860','VIT_04s0210g00060','VIT_07s0104g00430','VIT_15s0107g00210','VIT_16s0039g00970','VIT_10s0003g01730','VIT_17s0000g07060','VIT_16s0100g00510','VIT_02s0154g00590')
bf$get(filter = gene_names,  fields = 'name_In')
bf$get(filter = as.list(gene_names),  fields = 'name_In')
attr(gene_names)
attributes(gene_names)
attributes?
?attributes
junk <- as.list(gene_names)
attributes(junk)
attributes(junk) <- 'name_In'
attributes(junk) <- rep('name_In',length(junk))
length(junk)
attributes(junk) <- as.list(rep('name_In',length(junk)))
as.list(rep('name_In',length(junk)))
names(as.list(rep('name_In',length(junk))))
rm(junk)
?dict
# genes = BiologicalFeature.using(vv_compendium).get(filter={'name_In': gene_names})
my_filter <- dict(keys = 'name_in', values = gene_names)
# genes = BiologicalFeature.using(vv_compendium).get(filter={'name_In': gene_names})
my_filter <- reticute::dict(keys = 'name_in', values = gene_names)
# genes = BiologicalFeature.using(vv_compendium).get(filter={'name_In': gene_names})
my_filter <- reticulate::dict(keys = 'name_in', values = gene_names)
my_filter
bf <-  pycompass$BiologicalFeature$using(vv_compendium)
bf
bf$get(mt_fiter)
bf$get(my_fiter)
bf$get(my_filter)
# genes = BiologicalFeature.using(vv_compendium).get(filter={'name_In': gene_names})
my_filter <- reticulate::dict(keys = rep('name_in', length(gene_names), values = gene_names)
)
my_filter
# genes = BiologicalFeature.using(vv_compendium).get(filter={'name_In': gene_names})
my_filter <- reticulate::dict(keys = rep('name_in', length(gene_names)), values = gene_names)
my_filter
bf$get(my_fiter)
bf$get(my_filter)
py_help("bf")
reticulate::py_help("bf")
reticulate::py_help(bf)
reticulate::py_help(pycompass$biological_feature)
library(reticulate)
repl_python()
my_filter <- reticulate::dict(keys = 'name_In', values = gene_names)
bf <-  pycompass$BiologicalFeature$using(vv_compendium)
bf
bf$compendium$compendium_full_name
genes <- bf$get(my_filter)
genes <- bf$get(filter = my_filter)
repl_python()
# ------------------
#usethis::use_vignette("pyCOMPASSR")
devtools::load_all()
library(pyCOMPASSR)
vv_compendium <- get_compendium(species = 'vitis_vinifera')
vv_compendium$get_data_sources(0)
vv_compendium$normalization
vv_compendium$get_platform_types
vv_compendium$get_platform_types()
aba_genes <- c("VIT_05s0077g00430", "VIT_14s0060g00790", "VIT_14s0066g00810", "VIT_16s0050g00390", "VIT_18s0001g10450", "VIT_11s0016g03180", "VIT_08s0058g00470", "VIT_17s0000g01080", "VIT_06s0004g04860", "VIT_00s0322g00030", "VIT_06s0061g00730", "VIT_07s0005g00140", "VIT_00s0934g00010", "VIT_18s0001g04800", "VIT_01s0011g04820", "VIT_00s0216g00060", "VIT_18s0072g01220", "VIT_15s0048g02870", "VIT_00s0203g00070", "VIT_19s0014g03290", "VIT_01s0026g02710", "VIT_17s0000g08080", "VIT_00s0429g00040", "VIT_00s1206g00010", "VIT_09s0002g03690", "VIT_13s0067g00240", "VIT_07s0104g00350", "VIT_04s0023g02480", "VIT_18s0001g08490", "VIT_13s0019g02110", "VIT_04s0008g01120", "VIT_10s0003g00390", "VIT_03s0017g01410", "VIT_08s0007g08030", "VIT_08s0040g01820", "VIT_08s0058g01260", "VIT_09s0002g00630", "VIT_14s0068g01620", "VIT_18s0001g01030", "VIT_16s0050g01880", "VIT_08s0007g08280", "VIT_09s0002g06790", "VIT_09s0002g00640", "VIT_03s0063g01790", "VIT_04s0044g01230", "VIT_08s0040g02610", "VIT_01s0010g03680", "VIT_01s0137g00780", "VIT_02s0025g00500", "VIT_06s0004g05650", "VIT_07s0005g01080", "VIT_13s0156g00100", "VIT_17s0000g01120", "VIT_18s0001g07840", "VIT_18s0001g09290")
genes <- get_bf(compendium = vv_compendium, gene_names = as.list(aba_genes))
QuickSearch_ABAcoreset <- create_module(compendium = vv_compendium, biofeatures = genes)
dim(QuickSearch_ABAcoreset$values)
is.na(QuickSearch_ABAcoreset$values)
table(is.na(QuickSearch_ABAcoreset$values))
490*100/2260
knitr::opts_chunk$set(echo = TRUE)
library(reticulate)
repl_python()
